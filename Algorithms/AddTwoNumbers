// O(max(m, n)), space  O(max(m, n)),

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if (l1 == null || l2 == null) return l1;
        if (l1 == null) return l2;
        if (l2 == null) return l1;
        
        ListNode head = new ListNode(0);
        ListNode cursor = head;
        int carry = 0;
        ListNode node1 = l1, node2 = l2;
        while (node1 != null || node2 != null || carry != 0) {
            int sum = carry;
            if (node1 != null) {
                sum += node1.val;
                node1 = node1.next;
            }
            if (node2 != null) {
                sum += node2.val;
                node2 = node2.next;
            }
            ListNode node = new ListNode(sum % 10);
            carry = sum / 10;
            cursor.next = node;
            cursor = cursor.next;
        }
        return head.next;
    }
}

// my own shorter or more efficient
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode header = new ListNode(0);
        ListNode node = header;
        if(l1 == null && l2 == null) return header;
        if(l1 ==null ) return l2;
        if(l2 ==null ) return l1;
        int prime = 0;
        ListNode node1 = l1;
        ListNode node2 = l2;
        while(node1 != null && node2 !=null){
            int sum = node1.val + node2.val + prime;
            prime = sum/10;
            int digit = sum%10;
            node.next = new ListNode(digit);
            node = node.next;
            node1 = node1.next;
            node2 = node2.next;
        }
        if(node1 ==null && node2 ==null) {
            node.next = prime > 0 ? new ListNode(prime) : null;
        }
        else {
            node.next = node1 == null ? node2 : node1;
            node = node.next;
            while(prime > 0){
                int sum = prime + node.val;
                prime = sum/10;
                node.val = sum%10;
                if(node.next == null && prime > 0){
                    node.next = new ListNode(prime);
                    break;
                }
                node = node.next;
            }
        }
        
        return header.next;
    }
}


//http://blog.csdn.net/linhuanmars/article/details/19957829
public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
    int carry = 0;
    int digit = 0;
    ListNode head = null;
    ListNode pre = null;
    while(l1!=null && l2!=null)
    {
        digit = (l1.val+l2.val+carry)%10;
        carry = (l1.val+l2.val+carry)/10;
        ListNode newNode = new ListNode(digit);
        if(head==null)
            head = newNode;
        else
            pre.next = newNode;
        pre = newNode;
        l1 = l1.next;
        l2 = l2.next;
    }
    while(l1!=null)
    {
        digit = (l1.val+carry)%10;
        carry = (l1.val+carry)/10;
        ListNode newNode = new ListNode(digit);
        if(head==null)
            head = newNode;
        else
            pre.next = newNode;
        pre = newNode;
        l1 = l1.next;            
    }
    while(l2!=null)
    {
        digit = (l2.val+carry)%10;
        carry = (l2.val+carry)/10;
        ListNode newNode = new ListNode(digit);
        if(head==null)
            head = newNode;
        else
            pre.next = newNode;
        pre = newNode;
        l2 = l2.next;            
    }        
    if(carry>0)
    {
        ListNode newNode = new ListNode(carry);
        pre.next = newNode;
    }
    return head;
}

package leetcode;


 // Definition for singly-linked list.

 
public class AddTwoNumbers {
	  public class ListNode {
	      int val;
	     ListNode next;
	      ListNode(int x) {
	          val = x;
	          next = null;
	      }
	  }
// better way 
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        // Start typing your Java solution below
        // DO NOT write main() function
        int carry =0;
        ListNode res = new ListNode(0);
        ListNode cur1 = l1, cur2 = l2, head=res;
        while(cur1!=null || cur2!=null){
            if(cur1!=null){
                carry+=cur1.val;
                cur1=cur1.next;
            }
            if(cur2!=null){
                carry+=cur2.val;
                cur2=cur2.next;
            }
            head.next=new ListNode(carry%10);
            head=head.next;
            carry/=10;
        }
        if(carry==1) head.next=new ListNode(1);
        return res.next;
    }
}

// without using +
//http://javarevisited.blogspot.com/2013/06/how-to-add-two-integer-numbers-without-plus-arithmetic-operator-java-example.html
// Iterative Solution
public static int addIterative(int a, int b){  
        while (b != 0){
            int carry = (a & b) ; //CARRY is AND of two bits
          
            a = a ^b; //SUM of two bits is A XOR B
          
            b = carry << 1; //shifts carry to 1 bit to calculate sum
        }
        return a;
 }
 // recursion solution
 public static int add(int a, int b){
        if(b == 0) return a;
        int sum = a ^ b; //SUM of two integer is A XOR B
        int carry = (a & b) << 1;  //CARRY of two integer is A AND B
        return add(sum, carry);
 }



Read more: http://javarevisited.blogspot.com/2013/06/how-to-add-two-integer-numbers-without-plus-arithmetic-operator-java-example.html#ixzz2tiERVrM2

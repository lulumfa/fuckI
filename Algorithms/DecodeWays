// latest latest, I feel like easier to understand
// O(n), space constant
public class Solution {
    public int numDecodings(String s) {
        if(s == null || s.length() == 0) return 0;
        
        // 00, 1-26
        int pre = 1, prePre = 1;
        
        for(int i = 0; i < s.length(); i++) {
            int cur = 0;
            int digit = (int)(s.charAt(i) - '0');
            if(digit != 0) {
                cur += pre;
            }
            if(i != 0) {
                int lastDigit = (int)(s.charAt(i -1) - '0');
                if(lastDigit == 1 || (lastDigit == 2) && (digit <= 6)) cur += prePre;
            }
            
            prePre = pre;
            pre = cur;
        }
        return pre;
    }
}

// my latest way, not as clean as beloe

public class Solution {
    public int numDecodings(String s) {
        if(s == null || s.length() == 0) return 0;
        
        int lastLast = 1, last = 1;
        
        for(int i = 0; i < s.length(); i++) {
            int cur = 0;
            if(i > 0 && s.charAt(i-1) != '0') {
                int num = Integer.valueOf(s.substring(i-1, i+1));
                if(num >= 1 && num <= 26) {
                    cur = lastLast;
                }
            } 
            if(s.charAt(i) != '0') cur += last;
            
            lastLast = last;
            last = cur;
        }
        
        return last;
    }
}

// recursion + memo, runtime O(n), space (n) stack n + memo n
class Solution {

    HashMap<Integer, Integer> memo = new HashMap<>();

    private int recursiveWithMemo(int index, String str) {

        // If you reach the end of the string
        // Return 1 for success.
        if (index == str.length()) {
            return 1;
        }

        // If the string starts with a zero, it can't be decoded
        if (str.charAt(index) == '0') {
            return 0;
        }

        if (index == str.length()-1) {
            return 1;
        }

        // Memoization is needed since we might encounter the same sub-string.
        if (memo.containsKey(index)) {
            return memo.get(index);
        }

        int ans = recursiveWithMemo(index+1, str);
        if (Integer.parseInt(str.substring(index, index+2)) <= 26) {
             ans += recursiveWithMemo(index+2, str);
         }

        // Save for memoization
        memo.put(index, ans);

        return ans;
    }
    public int numDecodings(String s) {
        if (s == null || s.length() == 0) {
            return 0;
        }
        return recursiveWithMemo(0, s);
    }
}

// reference: http://blog.csdn.net/linhuanmars/article/details/24570759
//算法的时间复杂度是O(n)。空间上可以看出我们每次只需要前两位的历史信息，所以只需要维护三个变量然后迭代赋值就可以了，所以空间复杂度是O(1)。代

// my way , same comp

public class Solution {
    public int numDecodings(String s) {
        if(s==null || s.length()==0) return 0;
        int prePre = 1;
        int pre = s.charAt(0) == '0' ? 0 : 1;
        int cur = 0;
        for(int i = 1; i<s.length(); i++) {
            if(prePre!=0 && s.charAt(i-1)!='0' && Integer.parseInt(s.substring(i-1,i+1))<=26) {
                cur += prePre;
            }
            if(pre!=0 && s.charAt(i)!='0') {
                cur+=pre;
            }
            prePre = pre;
            pre = cur;
            cur = 0;
        }
        return pre;
    }
}

public class Solution {
    public int numDecodings(String s) {
        if(s == null || s.length() == 0 || s.charAt(0) == '0') return 0; 
        
        int old = 1;
        int pre = 1;
        int cur = 1;
        
        for(int i=1; i<s.length(); i++) {
            if(s.charAt(i)=='0') {
                if(s.charAt(i-1) == '1' || s.charAt(i-1) == '2') cur = old;
                else cur = 0;
            } else {
                if(s.charAt(i-1) == '1' || (s.charAt(i) >='1' && s.charAt(i) <='6' && s.charAt(i-1) == '2'))    cur = old+ pre;
                else cur = pre;
            }
            
            old = pre;
            pre = cur;
        }
        
        return cur;
    }
    

}

